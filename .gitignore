"""Hello, I am Mann Patel. This is my project on Stock Analysis using different metrics. It also sends an auto generated email with the report as an attachment."""

# Import the libraries

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Importing the datetime library to find today's date, current year and current year first day

from datetime import datetime
current_year = datetime.now().year
start_date = f"{current_year}-01-01"
end_date = datetime.now().strftime("%Y-%m-%d")

# Download the history of different assets 

data = yf.download("GOOGL AMZN AAPL", period="1d")
last_price = data.loc[:, "Adj Close"].T

# Find the info of the differet Tickers using ticker.info function

tickers = ["AAPL", "AMZN", "GOOGL"]
tickers_data = {}
for t in tickers:
    ticker_obj = yf.Ticker(t)
    
    data = pd.DataFrame.from_dict(ticker_obj.info, orient="index")
    data.reset_index(inplace=True)
    data.columns = ["Attributes", "Recent"]
    tickers_data[t] = data
# tickers_data

# Merge all the data into one dataframe from all the tickers

combined_data = pd.concat(tickers_data).reset_index()
combined_data = combined_data.drop(["level_1"], axis=1)
combined_data.columns = ["Ticker", "Attributes", "Recent"]
# combined_data

# Create variables to store the values of different ticker data

enterpriseToEbitda = (combined_data.loc[combined_data["Attributes"]=="enterpriseToEbitda", "Recent"].reset_index(drop=True))
operatingMargins = (combined_data.loc[combined_data["Attributes"]=="operatingMargins", "Recent"].reset_index(drop=True))   # in percentage
shortPercentOfFloat = (combined_data.loc[combined_data["Attributes"]=="shortPercentOfFloat", "Recent"].reset_index(drop=True))   # in percentage
revenueGrowth = (combined_data.loc[combined_data["Attributes"]=="revenueGrowth", "Recent"].reset_index(drop=True))  # in percentage

netIncomeToCommon = (combined_data.loc[combined_data["Attributes"]=="netIncomeToCommon", "Recent"].reset_index(drop=True))
CompanyName = (combined_data.loc[combined_data["Attributes"]=="shortName", "Recent"].reset_index(drop=True))
underlyingSymbol = (combined_data.loc[combined_data["Attributes"]=="underlyingSymbol", "Recent"].reset_index(drop=True))

# Find the whole year data to compute the YTD Performance

history = yf.download("GOOGL AMZN AAPL", start=start_date, end=end_date)
closing_prices = history["Adj Close"]

ytd_performance = (closing_prices.iloc[-1] - closing_prices.iloc[0]) / closing_prices.iloc[0] * 100
ytd_performance = ytd_performance.reset_index(drop=True)

# Store all data into one dictionary

result1 = {
    "Company Name": CompanyName,
    "Ticker": underlyingSymbol,
    "Last Price": last_price.iloc[:, 0].values,
    "Operating Margin (%) L12M": operatingMargins*100,
    "EV/(EBITDA-Capex)": enterpriseToEbitda,
    "YTD Performance": ytd_performance,
    "Rev (% 1Yr CAGR)": revenueGrowth*100,
    "Net Income(% 1Yr CAGR)": netIncomeToCommon,
    "short interest (% of float) ": shortPercentOfFloat*100    
}

# Convert dictionary into dataframe
result1 = pd.DataFrame(result1)

# Print the table
result1

# Convert it into .csv file
result1.to_csv("Data.csv")

# Automatic Email Sender Code to send the email with attachment of the .csv file

def send_mail(SENDER_EMAIL, RECEIVER_EMAIL, MAIL_PASSWORD, subject, content, file_name):
    msg = EmailMessage()
    msg["From"] = SENDER_EMAIL
    msg["To"] = RECEIVER_EMAIL
    # msg["Cc"] = CC_EMAIL
    # msg["Bcc"] = BCC_Email
    msg["Subject"] = subject
    msg.set_content(content)
    mime_type, encoding = guess_type(file_name)
    app_type, sub_type = mime_type.split("/")[0], mime_type.split("/")[1]

    with open(file_name, "rb") as file:
        file_data = file.read()
        msg.add_attachment(file_data, maintype=app_type, subtype=sub_type, filename=file_name)
        file.close()
    
    
    # Sending mail via SMTP server
    with SMTP_SSL("smtp.gmail.com", 465) as smtp:
        smtp.login(SENDER_EMAIL, MAIL_PASSWORD)
        smtp.send_message(msg)
        smtp.close()
    print("Mail Sent Sucessfully")


from smtplib import SMTP_SSL
from email.message import EmailMessage
import os
import json
from mimetypes import guess_type

SENDER_EMAIL = "sender email-id"   # input("Enter sender email-id: ")
MAIL_PASSWORD = "Gmail Security App Password"   # input("Enter Gmail Security App Password: ")
RECEIVER_EMAIL = "receiver email-id"   # input("Enter receiver email-id: ")

file_name = "Data.csv"

subject = "Daily Stock Analysis"

content = """Please find attached the report of """ + end_date +""" of 3 Stocks Apple, Amazon, Alphabet.

Thanks
Regards,
Mann Patel"""
send_mail(SENDER_EMAIL, RECEIVER_EMAIL, MAIL_PASSWORD, subject, content, file_name)
